// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUtilProvider is a mock of UtilProvider interface.
type MockUtilProvider struct {
	ctrl     *gomock.Controller
	recorder *MockUtilProviderMockRecorder
}

// MockUtilProviderMockRecorder is the mock recorder for MockUtilProvider.
type MockUtilProviderMockRecorder struct {
	mock *MockUtilProvider
}

// NewMockUtilProvider creates a new mock instance.
func NewMockUtilProvider(ctrl *gomock.Controller) *MockUtilProvider {
	mock := &MockUtilProvider{ctrl: ctrl}
	mock.recorder = &MockUtilProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtilProvider) EXPECT() *MockUtilProviderMockRecorder {
	return m.recorder
}

// Scanln mocks base method.
func (m *MockUtilProvider) Scanln(target ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range target {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Scanln", varargs...)
}

// Scanln indicates an expected call of Scanln.
func (mr *MockUtilProviderMockRecorder) Scanln(target ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scanln", reflect.TypeOf((*MockUtilProvider)(nil).Scanln), target...)
}
